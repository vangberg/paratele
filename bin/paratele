#! /usr/bin/env ruby

help = File.expand_path(File.join("..", "README"), File.dirname(__FILE__))

if ARGV.empty?
  exec "less #{help}"
end

require "clap"
require "json"
require "open3"

def path(*parts)
  File.expand_path(File.join(*parts), ENV["TELE_HOME"])
end

def ssh(server, script)
  out, status = Open3.capture2e("ssh -T -F #{path("ssh_config")} #{server} < #{script}")
  [out, status.exitstatus]
end

def layout
  $layout ||= JSON.parse(File.read(path("layout.json")))
end

def servers
  layout["servers"]
end

def recipe_script(recipe, command)
  path("recipes", recipe, "#{command}.sh")
end

def run(server, recipe, command)
  script = recipe_script(recipe, command)

  if File.exist?(script)
    ssh(server, script)
  end
end

out = Module.new do
  def self.server(name)
    puts name
  end

  def self.error
    puts "\033[01;31mERROR\033[00m"
  end

  def self.ok
    puts "\033[01;32mOK\033[00m"
  end

  def self.missing
    puts "\033[01;33mMISSING\033[00m"
  end

  def self.done
    puts "\033[01;32mDONE\033[00m"
  end

  def self.unknown
    puts "?"
  end
end

###

ENV["TELE_HOME"] ||= Dir.pwd

verbosity = 1

commands = Clap.run ARGV,
  "-h" => lambda {
    exec "less #{help}"
  },
  "-q" => lambda {
    verbosity = 0
  },
  "-v" => lambda {
    verbosity = 2
  },
  "-d" => lambda {|path|
    ENV["TELE_HOME"] = File.join(Dir.pwd, path)
  }

unless File.exists?(File.join(path, "layout.json"))
  $stderr.puts "Couldn't find `layout.json`"
  exit 1
end

Clap.run commands,
  "run" => lambda {|command|
    if commands.size == 3
      selected = commands.last.split(",")
      servers.select! {|server| selected.include?(server)}
    end

    exit_status = 0

    servers.each do |server, recipes|
      out.server(server)

      recipes.each do |recipe|
        print "  #{recipe}: "

        if File.exists?(path("recipes", recipe))
          stdout, status = run(server, recipe, command)

          case status
          when nil
            out.unknown
          when 0
            out.ok
            $stderr.print stdout if verbosity >= 2
          else
            out.error
            $stderr.print stdout if verbosity >= 1
            exit_status = 1
            break
          end
        else
          out.unknown
          exit 1
        end
      end
    end

    exit exit_status
  }
