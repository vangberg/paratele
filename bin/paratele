#!/usr/bin/env ruby

require "json"
require "open3"
require "clap"
require "erb"

$verbosity = 1
$home = Dir.pwd

def path *parts
  File.join($home, *parts)
end

def layout
  @layout ||= JSON.parse(File.read(path("layout.json")))
end

def run server, recipe, command
  template_path = path("recipes", recipe, "#{command}.erb")
  if File.exists?(template_path)
    template = ERB.new(File.read(template_path)).result
    ssh(server, template)
  end
end

def ssh server, script
  out, status = Open3.capture2e("ssh -T -F #{path("ssh_config")} #{server}", :stdin_data => script)
  [out, status.exitstatus]
end

commands = Clap.run ARGV,
  "-q" => lambda {
    $verbosity = 0
  },
  "-v" => lambda {
    $verbosity = 2
  },
  "-d" => lambda {|path|
    $home = File.join(Dir.pwd, path)
  }

unless File.exists?(path("layout.json"))
  $stderr.puts "Couldn't find `layout.json`"
  exit 1
end

out = Module.new do
  def self.server(name)
    puts name
  end

  def self.error
    puts "\033[01;31mERROR\033[00m"
  end

  def self.ok
    puts "\033[01;32mOK\033[00m"
  end

  def self.missing
    puts "\033[01;33mMISSING\033[00m"
  end

  def self.done
    puts "\033[01;32mDONE\033[00m"
  end

  def self.unknown
    puts "?"
  end
end

case ARGV.shift
when "run" then
  command = ARGV.shift
  environment, servers = ARGV.shift.split(":")

  environment = layout[environment]
  servers = if servers
              servers.split(",")
            else
              environment["servers"].keys
            end

  exit_status = 0

  servers.each do |server|
    recipes = environment["servers"][server]

    out.server(server)

    recipes.each do |recipe|
      print "  #{recipe}: "

      if File.exists?(path("recipes", recipe))
        stdout, status = run(server, recipe, command)

        case status
        when nil
          out.unknown
        when 0
          out.ok
          $stderr.print stdout if $verbosity >= 2
        else
          out.error
          $stderr.print stdout if $verbosity >= 1
          exit_status = 1
          break
        end
      else
        out.unknown
        exit 1
      end
    end
  end

  exit exit_status
end
